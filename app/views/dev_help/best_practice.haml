%ul.breadcrumb.list-inline
  %li=link_to "home",url("/")   
  %li=link_to "dev_help",url(:dev_help,:index)
  %li.active best_practice

%h3 过程记录
%h3 创建空项目
%ul
  %lipadrino g project -h
  %lipadrino g project qiankun -d activerecord -t riot -s jquery -e haml -m mocha  -c sass -a postgres

%h3 链接数据库
%ul
  %li
    * configs/database.rb
    * ActiveRecord::Base.configurations[:development] = {
    * :adapter   => 'postgresql',
    * :database  => 'qiankun_development',
    * :username  => 'crmp',
    * :password  => '123456',
    * :host      => 'localhost',
    * :port      => 5432
    * }
    * </code>
%h3 初始化数据库
%ul
  %li cd qiankun 进入项目目录
  %li rake --tasks 查看所有的任务
  %li rake ar:create:all 创建所有的数据库
  %li open pgadmin III,查看数据库是否已经创建

%h3 启动padrino
%ul
  %li cd qiankun
  %li padrino start --help
  %li edit Gem file  add gem 'pg'
  %li edit Gemfile, uncomments gem "thin" (使用thin作为app 服务器）
  %li bundle install
  %li padrino start -a thin
  %li visit http://localhost:3000/ (you will got  Sinatra doesn’t know this ditty.>)

%h3 产生管理员后台
%ul
  %li padrino g admin (仔细观察输出，可以看到 db/下面有输出）
  %li rake ar:migrate (建立了account表格）

%h3 建立初始化account账号，用于admin
%ul
  %li rake --tasks
  %li rake db:seeds (运行 db seed.rb, 创建管理员初始账号和密码）

%h3 查看当前路由以及登录
%ul
  %li rake routes
  %li 重启 padrino start -a thin
  %li http://localhost:3000/admin/
  %li http://localhost:3000/admin/sessions/new 
  %li 用初始化用户名和密码登录
  %li 修改models/account.rb
  %li    account = first(:conditions => ["lower(email) = lower(?)", email]) if email.present?
  %li   成为 account = self.where(:email=>email).first if email.present?
  %li http://localhost:3000/admin/

%h4 仔细分析和理解account 模型的MVC
%ul
  %li cd qianku/admin
  %li 阅读account的MVC的代码

%h3 创建用户模块 app
%ul
  %li padrino g app um

%h3 建立用户模型
%ul
  %li padrino g model --help
  %li padrino g model User name:string email:string mphone:string qq:string crypedpwd:string salt:string  role:string    veribit:string vericode:string avatar:string -a um
  %li rake ar:migrate (将表写入数据库）
  %li padrino g admin_page user
  %li http://localhost:3000/admin (观察user已经在管理后台上了，所有的CRUD自动创建完成了）
  %li admin/view/layouts/application.html.haml,注释掉Google api link，因为访问非常慢
  /%link{:href => 'http://fonts.googleapis.com/css?family=Varela', :rel => :stylesheet}

%h3 创建base, sessions,users 三个controller
%ul
  %li copy admin 下面的base的controller和view 代码
  %li copy sessions 下面的controller和view代码
  %li copy admin users 下面的controller和view 代码
  %li controller里面 把Qiankun::Admin 改为Qiankun::Um
  %li 发现移植 access_controll有命名空间问题，通过更改命名空间绕过去
  %li 发现pat方法不能识别，只好在controoler里面加一行 register Padrino::Admin::Helpers::ViewHelpers
  %li alias :pat :padrino_admin_translate

%h3 其他
%ul
  %li 移植登录系统
  %li 移植授权系统

%h3 一些小小的经验
%ul
  %li 在界面还没有好的时候，把URL放在一个地方可以实现点击和导航等功能

%h2  需要公关的技术难题

%h2 组织模块，消息模块，活动模块的原型开发
%h3 组织概述
%p 组织是一批用户的集合，是一个管理员拥有的所有的用户数
%p 组织可以分小组，用户可以属于不同的小组

%h3 消息模块
%p 消息类似于微信模式，建议现在不考虑论坛模式
%p 消息有节点和消息内容两个模型
%p 消息支持图片，语音，和文本

%h3 活动模块
%p 活动是用户发起的
%p 一个小组或许有多个活动，可以邀请大家加入



%h2 share template and css/js
%ul
  %li=link_to "http://www.padrinorb.com/blog/padrino-0-12-0-activesupport-4-rewritten-reloader-smarter-rendering-and-loads-more",url("http://www.padrinorb.com/blog/padrino-0-12-0-activesupport-4-rewritten-reloader-smarter-rendering-and-loads-more")

